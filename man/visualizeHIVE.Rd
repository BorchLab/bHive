% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualizeHIVE.R
\name{visualizeHIVE}
\alias{visualizeHIVE}
\title{Visualize bHIVE/honeycombHIVE Results}
\usage{
visualizeHIVE(
  result,
  X = NULL,
  plot_type = c("scatter", "boxplot", "violin", "density"),
  feature = NULL,
  transform = TRUE,
  transformation_method = c("PCA", "UMAP", "tSNE", "none"),
  title = "HIVE Results",
  layer = 1,
  task = c("clustering", "classification", "regression"),
  ...
)
}
\arguments{
\item{result}{A list object produced by \code{bHIVE} or \code{honeycombHIVE}. 
For multilayer models, each element represents one layer.}

\item{X}{Optional. A numeric matrix or data frame of the original input features.
If provided, data points will be plotted along with the prototypes.}

\item{plot_type}{Character string specifying the type of plot to generate. 
Options are:
  \itemize{
    \item \code{"scatter"}: A scatterplot of data points and prototypes.
    \item \code{"boxplot"}: A boxplot of a selected feature by group with 
    prototypes overlaid.
    \item \code{"violin"}: A violin plot of a selected feature by group 
    with prototypes overlaid.
    \item \code{"density"}: Density plots of a selected feature by group 
    with prototype markers.
  }}

\item{feature}{Optional. For \code{"boxplot"}, \code{"violin"}, or 
\code{"density"} plots, the name or index of the feature
in \code{X} to display. If \code{NULL}, the first column is used.}

\item{transform}{Logical. If \code{TRUE} and the data (or prototypes) 
has more than two columns, the specified transformation is applied for 
scatterplots.}

\item{transformation_method}{Character. The method used for dimensionality 
reduction. Options are \code{"PCA"}, \code{"UMAP"}, \code{"tSNE"}, or 
\code{"none"}.}

\item{title}{Character. Title for the plot.}

\item{layer}{Integer vector indicating which layer(s) of the result to visualize.
For bHIVE outputs, default is \code{1}. For multilayer honeycombHIVE 
outputs, specify one or more layer indices.}

\item{task}{Character. The prediction task for the result: one of
\code{"clustering"}, \code{"classification"},
 or \code{"regression"}. This is used to determine how grouping is computed.}

\item{...}{Additional arguments passed to PCA, tSNE, UMAP, or ggplot functions.}
}
\value{
A \code{ggplot} object representing the visualization.
}
\description{
This function produces publication-quality visualizations for the results 
generated by the \code{bHIVE} or \code{honeycombHIVE} functions. Users can 
specify one or more layers to visualize and choose from several plot types:
}
\details{
\itemize{
  \item \code{"scatter"}: A scatterplot of data points and prototypes. 
  When \code{X} has more than two columns and \code{transform} is 
  \code{TRUE}, a dimensionality reduction method is applied.
  \item \code{"boxplot"}: A boxplot of a selected feature by group with 
  prototype values overlaid.
  \item \code{"violin"}: A violin plot of a selected feature by group 
  with prototype values overlaid.
  \item \code{"density"}: Density plots of a selected feature by group 
  with prototype markers.
}

For scatterplots the transformation can be selected from \code{"PCA"}, 
\code{"UMAP"}, \code{"tSNE"}, or \code{"none"}. When multiple layers are 
visualized, the prototypes and the corresponding grouping information from 
each layer are combined and faceted by layer.
}
\examples{
data(iris)
X <- as.matrix(iris[, 1:4])

# Run honeycombHIVE for clustering 
res <- honeycombHIVE(X = X, 
                    task = "clustering", 
                    epsilon = 0.05,
                    layers = 3, 
                    nAntibodies = 30, 
                    beta = 5, 
                    maxIter = 10, 
                    verbose = FALSE)

# Visualize layer 2 as a scatterplot (using membership from layer 2).
visualizeHIVE(result = res,
              X = iris[, 1:4],
              plot_type = "scatter",
              title = "Layer 2: Scatterplot",
              layer = 2,
              task = "clustering")

# For classification: assume res[[1]]$predictions holds class labels.
visualizeHIVE(result = res,
              X = iris[, 1:4],
              plot_type = "violin",
              feature = "Sepal.Width",
              title = "Sepal Width by Group (Layer 1)",
              layer = 1,
              task = "classification")

# For regression: prototype grouping is overridden to a constant.
visualizeHIVE(result = res,
              X = iris[, 1:4],
              plot_type = "density",
              feature = "Sepal.Width",
              title = "Sepal Width Density (Layer 1)",
              layer = 1,
              task = "regression")
              
}
